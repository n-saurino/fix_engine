refactor(benchmarking): Extend framework for new benchmarks and LFQueue testing

Refactored the benchmarking framework to support additional benchmarks by introducing a `Formatter` class and using a consistent `BenchmarkLogger` implementation that inherits from `benchmark::BenchmarkReporter`. Adjusted the structure to accommodate multiple benchmark fixtures, requiring separate main functions and executables. Expanded benchmarking and testing coverage to include `LFQueue`. Additionally, corrected a networking issue to ensure successful client-server connections within the Docker network.

Changes:
- Refactored benchmarking framework by introducing a `Formatter` class and maintaining a unified `BenchmarkLogger` structure.
- Separated benchmark fixtures into distinct main functions and executables.
- Removed Prometheus metric filtering to allow full data collection.
- Added benchmarks for `LFQueue` performance analysis.
- Implemented tests to validate `LFQueue` correctness.
- Fixed Docker networking issue to enable proper client-server communication.

Next steps:
- Add `LFQueue` benchmark visualization to Grafana.
- Integrate `LFQueue` into the application for efficient inter-thread communication.
- Refactor the memory pool to use thread-local storage for better performance.
- Connect message passing to `LFQueue` to accelerate communication between application threads and network managers.

Authored and reviewed by: Nigel Saurino