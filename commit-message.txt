perf(memory): Benchmark and validate updated MemoryPool API against std::allocator

Updated all tests to reflect the new `MemoryPool` API. Conducted microbenchmarks comparing the new implementation against both the previous `MemoryPool` design and the standard allocator. Results show the new implementation is approximately 1.4x faster than the prior version and ~9x faster than `std::allocator`, validating the efficiency of the stack-based free list and compile-time capacity model.

Changes:
- Updated all unit tests to use the new `MemoryPool` API.
- Added microbenchmarks to compare performance with `std::allocator` and the previous memory pool.
- Demonstrated ~1.4x performance improvement over the old `MemoryPool` and ~9x over `std::allocator`.

Next steps:
- Investigate alternative designs for the `FIXBuffer` internal buffer pointer. Current use of `char*` complicates memory deallocation via `MemoryPool::Free()` and may be resolved in the upcoming FIXMessage framework refactor.
- Add thread-local support for the `MemoryPool` to improve multi-threaded memory management.
- Integrate a lock-free queue to pass FIX message buffer pointers from the applicationâ€™s thread-local memory pool to the TX Network Handler thread.
- Add a complementary LFQueue for returning deallocated buffer pointers from the TX Network Handler thread to the application thread.

Authored and reviewed by: Nigel Saurino