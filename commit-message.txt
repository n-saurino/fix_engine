refactor(core): Optimize FIX message construction and improve system reliability

Refactored core components of the FIX message construction pipeline to improve efficiency, safety, and maintainability. Introduced a structured approach for CompID and account name lookup to accelerate message building along the hotpath. Enhanced buffer handling to mitigate potential overflow risks. Improved concurrency readiness by making the sequence number generator atomic for future multi-threaded workloads. Also resolved build inconsistencies by aligning GTest and dependency versions between test and application builds.

Changes:
- Cleaned up `compile_commands.json` by removing outdated references.
- Added a `CompID` struct for efficient identifier lookup in FIX message construction.
- Ensured buffer safety by appending a trailing null character to `Order` buffers.
- Updated the sequence number generator to use `std::atomic` for thread safety.
- Fixed version mismatches and GTest conflicts between test and application builds.

Next steps:
- Refactor `Append` functions to improve tag handling performance.
- Optimize `FIXBuffer` by leveraging free functions and direct raw buffer access.
- Implement a memory pool for `FIXBuffer` to reduce dynamic allocations.
- Design a lock-free queue for efficient message processing.
- Build a high-performance FIX message parser to handle inbound server messages.

Authored and reviewed by: Nigel Saurino