feat(concurrency): Begin lock-free queue implementation for message passing

Started implementing a lock-free queue to facilitate efficient message passing between the application and networking threads. The design is based on Charles Frasch's CppCon talk and example implementation. Created the `feat/lf-queue` branch to develop this feature in isolation. Currently defining the foundational structure in a header file, including key member variables and type declarations.

Changes:
- Began implementing a lock-free queue for inter-thread message passing.
- Based the design on Charles Frasch's CppCon talk and example.
- Created a new feature branch: `feat/lf-queue`.
- Defined the initial queue structure in a header file, outlining key member variables and types.

Next steps:
- Implement enqueue and dequeue operations with memory order guarantees.
- Integrate the queue into the applicationâ€™s messaging pipeline.
- Optimize for low-latency performance in a multi-threaded environment.
- Add unit tests to validate correctness and concurrency behavior.

Authored and reviewed by: Nigel Saurino