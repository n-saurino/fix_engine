refactor(memory): Simplify FIXBuffer memory model and improve memory pool reliability

Refactored FIXBuffer to clarify ownership of memory by removing the `kCapacity` member variable, preventing confusion regarding memory allocation and deallocation. Fixed an out-of-bounds error in `MemoryPool::UpdateNextFreeIdx()`, improved memory pool initialization efficiency, and enhanced benchmarking reliability by introducing `Serialize` and `benchmark::ClobberMemory()` to prevent compiler optimizations.

Changes:
- Removed `kCapacity` member variable from `FIXBuffer` to eliminate ambiguity in memory ownership.
- Fixed an out-of-bounds error in `MemoryPool::UpdateNextFreeIdx()`.
- Removed redundant loop from `MemoryPool` initialization, improving efficiency.
- Added `Serialize` function and `benchmark::ClobberMemory()` to ensure `FIXBuffer` writes are not optimized away by the compiler.

Next steps:
- Refactor `Append` functions to improve tag handling performance.
- Optimize `FIXBuffer` by leveraging free functions and direct raw buffer access.
- Design a lock-free queue for efficient message processing.
- Build a high-performance FIX message parser to handle inbound server messages.

Authored and reviewed by: Nigel Saurino