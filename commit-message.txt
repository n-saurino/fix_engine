refactor(memory): Redesign Memory Pool with SPSC queue paradigm and compile-time capacity

Refactored the Memory Pool to align with the principles used in Charles Frasch's Single Producer Single Consumer (SPSC) queue. Introduced templating to define a compile-time capacity, enabling a stack-allocated free list for improved performance and memory efficiency. Reworked helper functions to utilize a stack-style free list, eliminating fragmentation issues present in the previous implementation.

Changes:
- Refactored the Memory Pool using paradigms from Charles Frasch’s SPSC queue.
- Templated the Memory Pool and introduced a compile-time capacity for stack allocation.
- Reworked helper functions to implement a stack-based free list, replacing the previous fragmented array-based approach.

Next steps:
- Add thread-local support for the Memory Pool to optimize memory management.
- Integrate an LFQueue to pass FIX message buffer pointers from the application's thread-local memory pool to the TX Network Handler thread.
- Integrate an LFQueue to return FIX message buffer pointers from the TX Network Handler thread for deallocation in the application’s thread-local memory pool.

Authored and reviewed by: Nigel Saurino